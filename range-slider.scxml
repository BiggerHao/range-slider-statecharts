<?xml version="1.0" encoding="UTF-8"?>
<scxml datamodel="ecmascript" initial="slider" name="myRangeSlider" version="1.0" xmlns:dbvis="dbvis" xmlns="http://www.w3.org/2005/07/scxml">
  <datamodel>
    <data id="valueA" expr="0" />
    <data id="valueB" expr="0" />
    <data id="maxValue" expr="0" />
    <data id="minValue" expr="0" />
  </datamodel>

  <parallel id="slider">
    <state id="handleA" initial="idleA">
      <state id="deadA">
        <transition event="progressB regressB" target="idleA" />
      </state>
      <state id="aliveA">
        <transition event="dieA" target="deadA" />
        <state id="idleA">
          <transition cond="valueA == maxValue" target="maxA" />
          <transition cond="valueA == minValue" target="minA" />
          <transition event="progressBar regressBar" target="updatingA" />
          <transition event="enterA" target="waitingA" />
        </state>
        <state id="waitingA">
          <transition event="progressA" target="progressingA" />
          <transition event="regressA" target="regressingA" />
          <transition event="progressBar regressBar" target="updatingA" />
          <transition event="leaveA" target="idleA" />
        </state>
        <state id="minA">
          <transition event="progressA" target="progressingA" />
          <transition event="progressBar" target="updatingA" />
        </state>
        <state id="maxA">
          <transition event="regressA" target="regressingA" />
          <transition event="regressBar" target="updatingA" />
        </state>
        <state id="movingA">
          <transition event="progressBar regressBar" target="updatingA" />
          <transition event="progressB regressB" target="idleA" />
          <transition event="stopMovingA" target="waitingA" />
          <state id="progressingA">
            <onentry>
              <assign location="valueA" expr="_event.data" />
            </onentry>
            <transition cond="valueA == maxValue" target="maxA" />
            <transition event="progressA" target="progressingA" />
            <transition event="regressA" target="regressingA" />
          </state>
          <state id="regressingA">
            <onentry>
              <assign location="valueA" expr="_event.data" />
            </onentry>
            <transition cond="valueA == minValue" target="minA" />
            <transition event="progressA" target="progressingA" />
            <transition event="regressA" target="regressingA" />
          </state>
        </state>
        <state id="updatingA">
          <!-- No need to update data here because progressBar and regressBar are also handled by another state machine in parallel. -->
          <transition cond="valueA == maxValue" target="maxA" />
          <transition cond="valueA == minValue" target="minA" />
          <transition event="progressBar regressBar" target="updatingA" />
          <transition event="stopMovingBar" target="idleA" />
        </state>
      </state>
    </state>

    <state id="handleB" initial="idleB">
      <state id="deadB">
        <transition event="progressA regressA" target="idleB" />
      </state>
      <state id="aliveB">
        <transition event="dieB" target="deadB" />
        <state id="idleB">
          <transition cond="valueB == maxValue" target="maxB" />
          <transition cond="valueB == minValue" target="minB" />
          <transition event="progressBar regressBar" target="updatingB" />
          <transition event="enterB" target="waitingB" />
        </state>
        <state id="waitingB">
          <transition event="progressB" target="progressingB" />
          <transition event="regressB" target="regressingB" />
          <transition event="progressBar regressBar" target="updatingB" />
          <transition event="leaveB" target="idleB" />
        </state>
        <state id="minB">
          <transition event="progressB" target="progressingB" />
          <transition event="progressBar" target="updatingB" />
        </state>
        <state id="maxB">
          <transition event="regressB" target="regressingB" />
          <transition event="regressBar" target="updatingB" />
        </state>
        <state id="movingB">
          <transition event="progressBar regressBar" target="updatingB" />
          <transition event="progressA regressA" target="idleB" />
          <transition event="stopMovingB" target="waitingB" />
          <state id="progressingB">
            <onentry>
              <assign location="valueB" expr="_event.data" />
            </onentry>
            <transition cond="valueB == maxValue" target="maxB" />
            <transition event="progressB" target="progressingB" />
            <transition event="regressB" target="regressingB" />
          </state>
          <state id="regressingB">
            <onentry>
              <assign location="valueB" expr="_event.data" />
            </onentry>
            <transition cond="valueB == minValue" target="minB" />
            <transition event="progressB" target="progressingB" />
            <transition event="regressB" target="regressingB" />
          </state>
        </state>
        <state id="updatingB">
          <!-- No need to update data here because progressBar and regressBar are also handled by another state machine in parallel. -->
          <transition cond="valueB == maxValue" target="maxB" />
          <transition cond="valueB == minValue" target="minB" />
          <transition event="progressBar regressBar" target="updatingB" />
          <transition event="stopMovingBar" target="idleB" />
        </state>
      </state>
    </state>

    <state id="bar" initial="idleBar">
      <state id="deadBar">
        <transition event="progressA progressB regressA regressB" target="updatingBar" />
      </state>
      <state id="aliveBar">
        <transition cond="(valueA == minValue &amp;&amp; valueB == maxValue) || (valueA == maxValue &amp;&amp; valueB == minValue) || valueA == valueB" target="deadBar" />
        <state id="idleBar">
          <transition cond="valueA == maxValue || valueB == maxValue" target="maxBar" />
          <transition cond="valueA == minValue || valueB == minValue" target="minBar" />
          <transition event="progressA progressB regressA regressB" target="updatingBar" />
          <transition event="enterBar" target="waitingBar" />
        </state>
        <state id="waitingBar">
          <transition event="progressBar" target="progressingBar" />
          <transition event="regressBar" target="regressingBar" />
          <transition event="progressA progressB regressA regressB" target="updatingBar" />
          <transition event="leaveBar" target="idleBar" />
        </state>
        <state id="minBar">
          <transition event="progressBar" target="progressingBar" />
          <transition event="progressA progressB" target="updatingBar" />
        </state>
        <state id="maxBar">
          <transition event="regressBar" target="regressingBar" />
          <transition event="regressA regressB" target="updatingBar" />
        </state>
        <state id="movingBar">
          <transition event="progressA progressB regressA regressB" target="updatingBar" />
          <transition event="stopMovingBar" target="waitingBar" />
          <state id="progressingBar">
            <onentry>
              <assign location="valueA" expr="_event.data[0]" />
              <assign location="valueB" expr="_event.data[1]" />
            </onentry>
            <transition cond="valueA == maxValue || valueB == maxValue" target="maxBar" />
            <transition event="progressBar" target="progressingBar" />
            <transition event="regressBar" target="regressingBar" />
          </state>
          <state id="regressingBar">
            <onentry>
              <assign location="valueA" expr="_event.data[0]" />
              <assign location="valueB" expr="_event.data[1]" />
            </onentry>
            <transition cond="valueA == minValue || valueB == minValue" target="minBar" />
            <transition event="progressBar" target="progressingBar" />
            <transition event="regressBar" target="regressingBar" />
          </state>
        </state>
        <state id="updatingBar">
          <!-- No need to update data here because progressA, progressB, regressA, and regressB are also handled by other state machines in parallel. -->
          <transition cond="valueA == maxValue || valueB == maxValue" target="maxBar" />
          <transition cond="valueA == minValue || valueB == minValue" target="minBar" />
          <transition event="progressA progressB regressA regressB" target="updatingBar" />
          <transition event="stopMovingA stopMovingB" target="idleBar" />
        </state>
      </state>
    </state>
  </parallel>

</scxml>
